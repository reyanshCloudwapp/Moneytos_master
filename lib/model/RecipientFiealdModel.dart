class Autogenerated {
  List<FieldSetsModel>? fieldSets;

  Autogenerated({this.fieldSets});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    if (json['fieldSets'] != null) {
      fieldSets = <FieldSetsModel>[];
      json['fieldSets'].forEach((v) {
        fieldSets!.add(FieldSetsModel.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    if (fieldSets != null) {
      data['fieldSets'] = fieldSets!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class FieldSetsModel {
  String? fieldSetId;
  String? fieldSetName;
  List<RecipientFieldsModel>? fields;

  FieldSetsModel({this.fieldSetId, this.fieldSetName, this.fields});

  FieldSetsModel.fromJson(Map<String, dynamic> json) {
    fieldSetId = json['fieldSetId'];
    fieldSetName = json['fieldSetName'];
    if (json['fields'] != null) {
      fields = <RecipientFieldsModel>[];
      json['fields'].forEach((v) {
        fields!.add(RecipientFieldsModel.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['fieldSetId'] = fieldSetId;
    data['fieldSetName'] = fieldSetName;
    if (fields != null) {
      data['fields'] = fields!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class RecipientFieldsModel {
  String? fieldType;
  int? minLength;
  int? maxLength;
  String? fieldId;
  String? name;
  String? hintText;
  bool? isRequired;
  String? placeholderText;
  String? regex;
  String? value;
  List<Options>? options;

  RecipientFieldsModel({
    this.fieldType,
    this.minLength,
    this.maxLength,
    this.fieldId,
    this.name,
    this.hintText,
    this.isRequired,
    this.placeholderText,
    this.regex,
    this.value,
    this.options,
  });

  RecipientFieldsModel.fromJson(Map<String, dynamic> json) {
    fieldType = json['fieldType'];
    minLength = json['minLength'];
    maxLength = json['maxLength'];
    fieldId = json['fieldId'];
    name = json['name'];
    hintText = json['hintText'];
    isRequired = json['isRequired'];
    placeholderText = json['placeholderText'];
    regex = json['regex'];
    if (json['options'] != null) {
      options = <Options>[];
      json['options'].forEach((v) {
        options!.add(Options.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['fieldType'] = fieldType;
    data['minLength'] = minLength;
    data['maxLength'] = maxLength;
    data['fieldId'] = fieldId;
    data['name'] = name;
    data['hintText'] = hintText;
    data['isRequired'] = isRequired;
    data['placeholderText'] = placeholderText;
    data['regex'] = regex;
    if (options != null) {
      data['options'] = options!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Options {
  String? id;
  String? name;

  Options({this.id, this.name});

  Options.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    name = json['name'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    return data;
  }
}

class AddRecipientFieldModel {
  String? id;
  String? type;
  String? value;

  AddRecipientFieldModel({this.id, this.type, this.value});

  AddRecipientFieldModel.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    type = json['type'];
    value = json['value'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['id'] = id;
    data['type'] = type;
    data['value'] = value;
    return data;
  }
}

class PhoneNumberModel {
  String? countryIso3Code;
  int? countryPhoneCode;
  String? number;

  PhoneNumberModel({this.countryIso3Code, this.countryPhoneCode, this.number});
}
